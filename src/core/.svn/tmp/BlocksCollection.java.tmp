package core;


import java.util.BitSet;
import java.util.Iterator;
import java.util.HashSet;
import java.util.Map;
import java.util.ArrayList;
<<<<<<< .mine
import java.util.Set;

=======
>>>>>>> .r23
import java.util.Iterator;
import java.util.Collection;

<<<<<<< .mine
import org.antlr.runtime.tree.CommonTree;

import org.antlr.runtime.ANTLRFileStream;
import org.antlr.runtime.TokenRewriteStream;

import blockRepresentation.*;

import core.*;

=======
>>>>>>> .r23
public class BlocksCollection {
	
	private static int s_label ;
	
	private static int s_next;
	
	private static  Map<Integer, IBlock> s_blocks;

	
	public BlocksCollection(){
		
		s_blocks = new HashMap<Integer, IBlock> ();
		s_label = 1 ;
		
	}
	
	/**
	 * Print to output a textual representation of the inner structure
	 */
	public void print(){}
	
	public ArrayList<IBlock> getAllBlocks(){
		return null;
	}

	public void parseTree(CommonTree t) {
		
		if ( t != null ) {
		
			for ( int i = 0; i < t.getChildCount(); i++ ) {
				
				IBlock newBlock = createBlock((CommonTree) t.getChild(i));
				
				
				if( ! s_blocks.isEmpty() ) // the first is next to none
				{
						s_blocks.get(s_next).addNext(newBlock);
				}
				
			    addBlock( newBlock , true); 
			    
			}
			
		}	
		
		
		
	}
	
	private IBlock createBlock(CommonTree t) {
		
		if ( t != null ) {
			
			switch ( t.getType() ) {
			
			case 44:
				return new WhileBlock(t); 
			case 17:
				return new IfBlock(t); 
			case 40:
				return new SkipBlock(t); 
			case 5:
				return new AssignmentBlock(t); 
			case 18:
				return new DeclarationBlock(t); 

			}
		
		}
		
		return null;	
		
	}
	
	public static boolean addBlock(IBlock b){
		
		b.setLabel(s_label);		
		s_blocks.put(s_label++, b);
		
		return true ;
	}
	
	
	public static boolean addBlock(IBlock b, boolean l ){
		
		s_next = s_label ;
		b.setLabel(s_label);
		s_blocks.put(s_label++, b);
		
		return true ;
	}

<<<<<<< .mine
	public void printTree(CommonTree t, int indent) {
		
		if ( t != null ) {
			StringBuffer sb = new StringBuffer(indent);
			for ( int i = 0; i < indent; i++ )
				sb = sb.append("   ");
			for ( int i = 0; i < t.getChildCount(); i++ ) {
				System.out.println( i  + "\t " + sb.toString() + t.getChild(i).toString()   );
				printTree((CommonTree)t.getChild(i), indent+1);
			}
			
		}	
		
	}

	public String getEdges() {
		
		String result = "" ; 
		
		for (Map.Entry<Integer, IBlock> entry : s_blocks.entrySet())
		{
		    result = result + "\n" + entry.getValue().getLabel() + "\t" + entry.getValue() ;
		    
		    ArrayList<IBlock> nexts = entry.getValue().getImmediateNexts() ;
		    for (int i = 0 ; i < nexts.size(); i++)
		    	result = result + "\t\t " + nexts.get(i).getLabel() + "\t"+nexts.get(i);		    
		    
		}
		
		return result;	
	}
	
	
	
	/**********************************
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 					DEAR ANALYSTS PLEASE LOOK DOWN HERE
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * 
	 * *********************************
	 */
	

	/** Getter for a block accessing by label
	 *  @param l The label
	 *  @returns The Block with label l
	 */
	public IBlock getBlock(int l){
		return s_blocks.get(l);
	}
	
	/** Retrieves all the previous blocks where the variable var was involved as assignment destination
	 *  @param l The label
	 *  @param var Variable name
	 *  @returns The Block with label l
	 */
	public Set<IBlock> getAllPreviousAssignmentsWhereIsAtLeft(int l, String var){
		
		Set<IBlock> s = new HashSet<IBlock>();	
		
		IBlock b = s_blocks.get(l);
		
		if( b != null)
		{
			// getting all the previous assignments
			Set<IBlock> allPreviouses = b.getAllPreviousesEver() ;
				
			// iterating the set
			Iterator<IBlock> i = allPreviouses.iterator();
			
			while ( i.hasNext()) {
			      
				IBlock temp =  i.next() ;
			    
				// Adding the assignemnts
				if ( temp.isAssignmentBlock() ) 
				{
					// casting
					AssignmentBlock a  = (AssignmentBlock) temp;
					
					// Passing jus tif the var is at left
					if( a.isOnLeft(var) )
						s.add(temp);
				}
			      
		    }
			
			
		}
		
		return s;
	}
	
	/** Retrieves all the previous blocks where the variable var was involved as assignment source
	 *  @param l The label
	 *  @param var Variable name
	 *  @returns The Block with label l
	 */
	public Set<IBlock> getAllPreviousAssignmentsWhereIsAtRight(int l, String var){
		
		Set<IBlock> s = new HashSet<IBlock>();	
		
		IBlock b = s_blocks.get(l);
		
		if( b != null)
		{
			// getting all the previous assignments
			Set<IBlock> allPreviouses = b.getAllPreviousesEver() ;
				
			// iterating the set
			java.util.Iterator<IBlock> i = allPreviouses.iterator();
			
			while ( i.hasNext()) {
			      
				IBlock temp =  i.next() ;
			    
				// Adding the assignemnts
				if ( temp.isAssignmentBlock() ) 
				{
					// casting
					AssignmentBlock a  = (AssignmentBlock) temp;
					
					// Passing jus tif the var is at left
					if( a.isOnRight(var) )
						s.add(temp);
				}
			      
		    }
			
			
		}
		
		return s;
	}
	

	/** Retrieves all the nexts blocks where the variable var was involved as assignment Destination
	 *  @param l The label
	 *  @param var Variable name
	 *  @returns The Block with label l
	 */
	public Set<IBlock> getAllNextAssignmentsWhereIsAtLeft(int l, String var){
		
		Set<IBlock> s = new HashSet<IBlock>();	
		
		IBlock b = s_blocks.get(l);
		
		if( b != null)
		{
			// getting all the previous assignments
			Set<IBlock> allNexts = b.getAllNextsEver() ;
				
			// iterating the set
			java.util.Iterator<IBlock> i = allNexts.iterator();
			
			while ( i.hasNext()) {
			      
				IBlock temp =  i.next() ;
			    
				// Adding the assignemnts
				if ( temp.isAssignmentBlock() ) 
				{
					// casting
					AssignmentBlock a  = (AssignmentBlock) temp;
					
					// Passing jus tif the var is at left
					if( a.isOnLeft(var) )
						s.add(temp);
				}
			      
		    }
			
			
		}
		
		return s;
	}
	
	
	/** Retrieves all the next blocks where the variable var was involved as assignment source
	 *  @param l The label
	 *  @param var Variable name
	 *  @returns The Block with label l
	 */
	public Set<IBlock> getAllNextAssignmentsWhereIsAtRight(int l, String var){
		
		Set<IBlock> s = new HashSet<IBlock>();	
		
		IBlock b = s_blocks.get(l);
		
		if( b != null)
		{
			// getting all the previous assignments
			Set<IBlock> allNexts = b.getAllNextsEver() ;
				
			// iterating the set
			java.util.Iterator<IBlock> i = allNexts.iterator();
			
			while ( i.hasNext()) {
			      
				IBlock temp =  i.next() ;
			    
				// Adding the assignemnts
				if ( temp.isAssignmentBlock() ) 
				{
					// casting
					AssignmentBlock a  = (AssignmentBlock) temp;
					
					// Passing jus tif the var is at left
					if( a.isOnRight(var) )
						s.add(temp);
				}
			      
		    }
			
			
		}
		
		return s;
	}
	
	/** Returns a string representation of the Graph with just Nexts edges
	 * 
	 * @return  a string representation of the Graph with just Nexts edges
	 */
	public String getNextEdges() {
		
		String result = "" ; 
		
		for (Map.Entry<Integer, IBlock> entry : s_blocks.entrySet())
		{
		    result = result + "\n(" + entry.getValue().getLabel()  + ") " + entry.getValue() + "\t-->" ;
		    
		    ArrayList<IBlock> nexts = entry.getValue().getImmediateNexts() ;
		    for (int i = 0 ; i < nexts.size(); i++)
		    	result = result  + "\t(" +nexts.get(i).getLabel() + ")\t"+nexts.get(i);		    
		    
		}
		
		return result;	
	}
	
	/** Returns a string representation of the Graph with just Previouses
	 * 
	 * @return  a string representation of the Graph with just Nexts edges
	 */
	public String getPreviousEdges() {
		
		String result = "" ; 
		
		for (Map.Entry<Integer, IBlock> entry : s_blocks.entrySet())
		{
			result = result + "\n(" + entry.getValue().getLabel()  + ") " + entry.getValue() + "\t-->" ;
		    
		    ArrayList<IBlock> nexts = entry.getValue().getImmediatePreviouses() ;
		    for (int i = 0 ; i < nexts.size(); i++)
		    	result = result  + "\t(" +nexts.get(i).getLabel() + ")\t"+nexts.get(i);		    
		    
		}
		
		return result;	
	}
	
	/** The tostring implementation provides the list of the label/states of the graph
	 * 
	 * @returns the mapping label/block
	 */
	public String toString() {
		
		String result = "" ; 
		
		for (Map.Entry<Integer, IBlock> entry : s_blocks.entrySet())
		{
		    result = result + "\n(" + entry.getValue().getLabel() + ") " + entry.getValue().toString() ;
		}
		
		return result;
		
	}
	
=======
	
	

	

	
	
// ------------------------------------------------------------------------------------------------------------------------------------------------------------	
// Added By Riccardo, something like:
	public ArrayList<String> getAllVariables() {
		return null; // Return the list of all the different variables occurring the program.
	}
	
	public void createCells() {
		for (int i=0; i<getAllBlocks().size(); i++) { // Creation of all the ROWS of the tables
			getBlock(i).addCells(getAllVariables());			
		}
	}
	
	public BitSet getSigns(int rowNumber, String variableName) {
		return getBlock(rowNumber).getSigns(variableName);
	}
// ------------------------------------------------------------------------------------------------------------------------------------------------------------	

	public Iterator iterator() {
		// TODO Auto-generated method stub
		return null;
	}
>>>>>>> .r23
}
